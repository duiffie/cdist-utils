#!/bin/bash
#
# Cdist initial manifest

# Break on errors
set -e

MANIFESTALL=autorun

CDISTSOURCE() {
   man="$1"
   if test "$CDISTDEBUG" -gt 0; then
      echo "INIT MANIFEST: sourcing $man"
      set -x
   fi
   . $man
   if test "$CDISTDEBUG" -gt 0; then
      set +x
   fi
}

# Safe include function for manifests including other manifests
include() {
   ! test "$CDISTACTION" && return 0
   local manifest="${__manifest}/${MANIFESTALL}/${1}"
   if test -e "$manifest"; then
      source "$manifest"
   else
      return 1
   fi
}

# parse configuration file
include_cfg() {
   local repo="$1"; shift
   local key="$1"; shift
   local line include newinclude

   # Find configuration file
   include_find_cfg() {
      local i key init=0
      test "$1" == "--init" && { init=1; shift; }
      key="$1"
      for i in ${!_includedirs[*]}; do
         test -f "${_includedirs[$i]}/${key}" && { _cfgfile="${_includedirs[$i]}/${key}"; break; }
         test "$init" = "1" && unset '_includedirs[i]'
      done
      if test "$init" -eq 1; then
         test "$init" = "1" && unset '_includedirs[i]'
      fi
      #_includedirs=( "$_includedirs[@]}" )
      test "$_cfgfile" = "" && return 1
      return 0
   }

   test "${#FUNCNAME[*]}" -gt 10 && { echo "Include depth too great." > /dev/stderr; return 1 ;}
   unset _cfgfile
   if test "${FUNCNAME[0]}" != "${FUNCNAME[1]}"; then
      _includedirs=( "$@" )
      include_find_cfg --init "$key"
   else
      include_find_cfg "$key"
   fi
   test "$?" -ne 0 && return

   while read -u 5 line; do
      case "${line:0:1}" in
      @) include_cfg "$repo" "${line:1}"
         test "$?" -ne 0 && { echo "Error processing include ${line:1}" > /dev/stderr; return 1; }
      ;;
      !) if test -f "${repo}/${line:1}"; then
            echo "${line:1}"
         else
            echo "File $line does not exist (from $_cfgfile)" > /dev/stderr
            return 1
         fi
      ;;
      esac
   done 5< "$_cfgfile"
   return 0
}

# Pull explorer information into environment
for explorerfile in $__global/explorer/*; do
   explorer="${explorerfile/*\//}"
   explorer="${explorer//-/_}"
   if test "$(cat "$explorerfile" | wc -l)" -eq 1; then
      declare "e_$explorer=$(cat "$explorerfile")"
   else
      readarray -t "e_$explorer" < "$explorerfile"
   fi
done

# Always need fqdn to be set
test "$e_fqdn" = "" && { echo "fqdn not set, aborting."; exit 1; }
test "$e_fqdn" == "${e_fqdn%%.*}" && { echo "fqdn is not fully qualified, aborting."; exit 1; }

# Set all tags to 0
for tag in $(cdist inventory list  | sed -n "s/.* //; s/,/\n/gp" | sort -u); do
   tag="${tag//-/_}"
   declare "t_$tag=0"
done
# Set host tags to 1
for tag in $(cdist inventory list "$e_fqdn" | sed -n "s/.* //; s/,/ /gp" ); do
   tag=${tag//-/_}
   declare "t_$tag=1"
done

# Save explorer output
rm -rf "$CDIST_EXPLORE/$e_fqdn"; mkdir -p "$CDIST_EXPLORE/$e_fqdn"
for name in $__global/explorer/*; do
   cp "$name" "$CDIST_EXPLORE/$e_fqdn"
done

# Run specific manifest(s) if required. "none" will only explore.
if test "$CDISTACTION" != ""; then
   test "$CDISTACTION" = "none" && exit 0
   for manifest in ${CDISTACTION//,/ }; do
      if test -f "$__manifest/$manifest"; then
         CDISTSOURCE "$__manifest/$manifest"
      elif test -f "$__manifest/$MANIFESTALL/$manifest"; then
         CDISTSOURCE "$__manifest/$MANIFESTALL/$manifest"
      else
         echo "Manifest $manifest not found."
         exit 1
      fi
   done
   exit
fi

for manifest in $__manifest/$MANIFESTALL/*; do
  CDISTSOURCE "$manifest"
done
